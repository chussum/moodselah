{"version":3,"sources":["routes/Register/Register.module.scss","routes/Register/queries.ts","routes/Register/Register.tsx","routes/Register/index.tsx"],"names":["module","exports","container","title","subtitle","form","row","textField","btnContainer","btnLogin","EMAIL_SIGN_UP","gql","_templateObject","i18n","_ref","t","loading","onInputChange","onSubmit","react_default","a","createElement","Fragment","Helmet_default","className","s","TextField_default","name","label","onChange","autoComplete","type","classNames","Button_default","variant","color","disabled","EmailSignUpMutation","Mutation","RegisterContainer","loginMutation","registerMutation","state","email","nick","password","confirmPassword","_this2","this","_this$state","react_apollo_browser_umd","mutation","LOG_USER_IN","logUserIn","Register_EmailSignUpMutation","variables","onCompleted","postRegiterMutation","mutaion","routes_Register_Register","Object","assign","props","e","_e$target","target","value","setState","defineProperty","preventDefault","data","EmailSignUp","success","token","user","toast","error","React","Component","autobind"],"mappings":"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","file":"static/js/register.04d474c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Register_container__1vgj-\",\"title\":\"Register_title__NF6V6\",\"subtitle\":\"Register_subtitle__QQOY1\",\"form\":\"Register_form__1zUNk\",\"row\":\"Register_row__36znW\",\"textField\":\"Register_textField__OWJwH\",\"btnContainer\":\"Register_btnContainer__1CjSN\",\"btnLogin\":\"Register_btnLogin__38aim\"};","import { gql } from 'apollo-boost';\n\nexport const EMAIL_SIGN_UP = gql`\n  mutation emailSignUp(\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n    $nick: String!\n    $profilePhoto: String\n    $phoneNumber: String\n  ) {\n    EmailSignUp(\n      email: $email\n      password: $password\n      confirmPassword: $confirmPassword\n      nick: $nick\n      profilePhoto: $profilePhoto\n      phoneNumber: $phoneNumber\n    ) {\n      success\n      error\n      token\n      user {\n        id\n        email\n        nick\n        profilePhoto\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport classNames from 'classnames';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport i18n from '~/helpers/i18n';\nimport s from './Register.module.scss';\n\ninterface IProps {\n  t: (keyword: string) => string;\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  loading: boolean;\n}\n\nconst Register: React.SFC<IProps> = ({ t, loading, onInputChange, onSubmit }) => (\n  <>\n    <Helmet>\n      <title>{t('register.title')} - Moodselah</title>\n    </Helmet>\n    <div className={s.container}>\n      <form onSubmit={onSubmit}>\n        <div className={s.form}>\n          <div className={s.subtitle}>{t('register.title')}</div>\n          <div className={s.row}>\n            <TextField\n              name=\"email\"\n              label={t('register.username')}\n              className={s.textField}\n              onChange={onInputChange}\n              autoComplete=\"username\"\n            />\n          </div>\n          <div className={s.row}>\n            <TextField name=\"nick\" label={t('register.nick')} className={s.textField} onChange={onInputChange} />\n          </div>\n          <div className={s.row}>\n            <TextField\n              name=\"password\"\n              type=\"password\"\n              label={t('register.password')}\n              className={s.textField}\n              onChange={onInputChange}\n              autoComplete=\"new-password\"\n            />\n          </div>\n          <div className={s.row}>\n            <TextField\n              name=\"confirmPassword\"\n              type=\"password\"\n              label={t('register.confirmPassword')}\n              className={s.textField}\n              onChange={onInputChange}\n              autoComplete=\"new-password\"\n            />\n          </div>\n          <div className={classNames(s.row, s.btnContainer)}>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={s.btnLogin} disabled={loading}>\n              {t('register.submit')}\n            </Button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </>\n);\n\nexport default i18n(Register);\n","import autobind from 'autobind-decorator';\nimport React from 'react';\nimport { Mutation, MutationFn } from 'react-apollo';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { LOG_USER_IN } from '~/sharedQueries.local';\nimport { emailSignUp, emailSignUpVariables } from '~/types/api';\nimport { EMAIL_SIGN_UP } from './queries';\nimport Register from './Register';\n\ninterface IState {\n  email: string;\n  nick: string;\n  password: string;\n  confirmPassword: string;\n}\n\ninterface IProps extends RouteComponentProps<any> {}\n\nclass EmailSignUpMutation extends Mutation<emailSignUp, emailSignUpVariables> {}\n\nclass RegisterContainer extends React.Component<IProps, IState> {\n  public loginMutation?: MutationFn;\n  public registerMutation?: MutationFn<emailSignUp, emailSignUpVariables>;\n  public state = {\n    email: '',\n    nick: '',\n    password: '',\n    confirmPassword: ''\n  };\n\n  public render() {\n    const { email, nick, password, confirmPassword } = this.state;\n    return (\n      <Mutation mutation={LOG_USER_IN}>\n        {logUserIn => {\n          this.loginMutation = logUserIn;\n          return (\n            <EmailSignUpMutation\n              mutation={EMAIL_SIGN_UP}\n              variables={{\n                email,\n                nick,\n                password,\n                confirmPassword\n              }}\n              onCompleted={this.postRegiterMutation}\n            >\n              {(mutaion, { loading }) => {\n                this.registerMutation = mutaion;\n                return (\n                  <Register\n                    {...this.props}\n                    {...this.state}\n                    loading={loading}\n                    onInputChange={this.onInputChange}\n                    onSubmit={this.onSubmit}\n                  />\n                );\n              }}\n            </EmailSignUpMutation>\n          );\n        }}\n      </Mutation>\n    );\n  }\n\n  @autobind\n  private onInputChange(e) {\n    const {\n      target: { name, value }\n    } = e;\n    this.setState({\n      [name]: value\n    } as any);\n  }\n\n  @autobind\n  private onSubmit(e) {\n    e.preventDefault();\n    if (this.registerMutation) {\n      this.registerMutation();\n    }\n  }\n\n  @autobind\n  private postRegiterMutation(data) {\n    const { EmailSignUp } = data;\n    if (EmailSignUp.success) {\n      const { token, user } = EmailSignUp;\n      if (this.loginMutation && token) {\n        this.loginMutation({\n          variables: {\n            token,\n            user\n          }\n        });\n      }\n    } else {\n      toast.error(EmailSignUp.error);\n    }\n  }\n}\n\nexport default RegisterContainer;\n"],"sourceRoot":""}