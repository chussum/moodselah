{"version":3,"sources":["routes/Login/Login.module.scss","routes/Login/Login.tsx","routes/Login/queries.ts","routes/Login/index.tsx"],"names":["module","exports","container","form","title","subtitle","row","textField","btnContainer","btnLogin","footer","i18n","_ref","t","loading","onInputChange","onSubmit","react_default","a","createElement","Fragment","Helmet_default","className","s","TextField_default","name","label","onChange","autoComplete","type","classNames","Button_default","variant","color","disabled","Link","to","EMAIL_SIGN_IN","gql","_templateObject","EmailSignInMutation","Mutation","LoginContainer","loginMutation","emailMutation","state","email","password","_this2","this","_this$state","react_apollo_browser_umd","mutation","LOG_USER_IN","logUserIn","Login_EmailSignInMutation","variables","onCompleted","postEmailMutation","routes_Login_Login","Object","assign","props","e","_e$target","target","value","setState","defineProperty","preventDefault","data","EmailSignIn","success","token","user","toast","error","React","Component","autobind"],"mappings":"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","file":"static/js/login.34603ab3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__2Uf3j\",\"form\":\"Login_form__1bf7g\",\"title\":\"Login_title__pll8H\",\"subtitle\":\"Login_subtitle__3iz_m\",\"row\":\"Login_row__283kN\",\"textField\":\"Login_textField__b7rPN\",\"btnContainer\":\"Login_btnContainer__1p_li\",\"btnLogin\":\"Login_btnLogin__29DTW\",\"footer\":\"Login_footer__7pItn\"};","import Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport classNames from 'classnames';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport i18n from '~/helpers/i18n';\nimport s from './Login.module.scss';\n\ninterface IProps {\n  t: (keyword: string) => string;\n  onInputChange: (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  loading: boolean;\n}\n\nconst Login: React.SFC<IProps> = ({ t, loading, onInputChange, onSubmit }) => (\n  <>\n    <Helmet>\n      <title>{t('login.title')} - Moodselah</title>\n    </Helmet>\n    <div className={s.container}>\n      <form onSubmit={onSubmit}>\n        <div className={s.form}>\n          <div className={s.subtitle}>{t('login.title')}</div>\n          <div className={s.row}>\n            <TextField\n              name=\"email\"\n              label={t('login.username')}\n              className={s.textField}\n              onChange={onInputChange}\n              autoComplete=\"username\"\n            />\n          </div>\n          <div className={s.row}>\n            <TextField\n              name=\"password\"\n              type=\"password\"\n              label={t('login.password')}\n              className={s.textField}\n              onChange={onInputChange}\n              autoComplete=\"current-password\"\n            />\n          </div>\n          <div className={classNames(s.row, s.btnContainer)}>\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={s.btnLogin} disabled={loading}>\n              {t('login.submit')}\n            </Button>\n          </div>\n          <div className={classNames(s.row, s.footer)}>\n            <Link to=\"/register\">{t('register.title')}</Link>\n            {/* <Link to=\"/forgot\">{t('forgot.title')}</Link> */}\n          </div>\n        </div>\n      </form>\n    </div>\n  </>\n);\n\nexport default i18n(Login);\n","import { gql } from 'apollo-boost';\n\nexport const EMAIL_SIGN_IN = gql`\n  mutation emailSignIn($email: String!, $password: String!) {\n    EmailSignIn(email: $email, password: $password) {\n      success\n      error\n      token\n      user {\n        id\n        email\n        nick\n        profilePhoto\n      }\n    }\n  }\n`;\n","import autobind from 'autobind-decorator';\nimport React from 'react';\nimport { Mutation, MutationFn } from 'react-apollo';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { emailSignIn, emailSignInVariables } from '~/types/api';\nimport { LOG_USER_IN } from '~/sharedQueries.local';\nimport Login from './Login';\nimport { EMAIL_SIGN_IN } from './queries';\n\ninterface IState {\n  email: string;\n  password: string;\n}\ninterface IProps extends RouteComponentProps<any> {}\n\nclass EmailSignInMutation extends Mutation<emailSignIn, emailSignInVariables> {}\n\nclass LoginContainer extends React.Component<IProps, IState> {\n  public loginMutation?: MutationFn;\n  public emailMutation?: MutationFn<emailSignIn, emailSignInVariables>;\n  public state = {\n    email: '',\n    password: ''\n  };\n\n  public render() {\n    const { email, password } = this.state;\n    return (\n      <Mutation mutation={LOG_USER_IN}>\n        {logUserIn => {\n          this.loginMutation = logUserIn;\n          return (\n            <EmailSignInMutation\n              mutation={EMAIL_SIGN_IN}\n              variables={{\n                email,\n                password\n              }}\n              onCompleted={this.postEmailMutation}\n            >\n              {(mutation, { loading }) => {\n                this.emailMutation = mutation;\n                return (\n                  <Login\n                    {...this.props}\n                    {...this.state}\n                    loading={loading}\n                    onInputChange={this.onInputChange}\n                    onSubmit={this.onSubmit}\n                  />\n                );\n              }}\n            </EmailSignInMutation>\n          );\n        }}\n      </Mutation>\n    );\n  }\n\n  @autobind\n  private onInputChange(e) {\n    const {\n      target: { name, value }\n    } = e;\n    this.setState({\n      [name]: value\n    } as any);\n  }\n\n  @autobind\n  private onSubmit(e) {\n    e.preventDefault();\n    if (this.emailMutation) {\n      this.emailMutation();\n    }\n  }\n\n  @autobind\n  private postEmailMutation(data) {\n    const { EmailSignIn } = data;\n    if (EmailSignIn.success) {\n      const { token, user } = EmailSignIn;\n      if (this.loginMutation && token) {\n        this.loginMutation({\n          variables: {\n            token,\n            user\n          }\n        });\n      }\n    } else {\n      toast.error(EmailSignIn.error);\n    }\n  }\n}\n\nexport default LoginContainer;\n"],"sourceRoot":""}